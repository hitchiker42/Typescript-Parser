(*The syntax of this file should be mostly self explanatory if you understand EBNF 
  and regular expressions, The one unique feature is that a literal or a rule
  can be excluded from the resulting parse tree by surronding it with angle brackets*)
S ::= DeclarationSourceFile
TypeParameters ::= <'<'> TypeParameterList <'>'>
TypeParameterList ::= ws-opt TypeParameter (<','> TypeParameter)*
TypeParameter ::= Identifier ws [Constraint] ws-opt
Identifier ::= #"[$_\p{L}][$_\p{L}\p{N}]*"
Constraint ::= <'extends'> ws Type
Type ::= PredefinedType
       | TypeReference
       | TypeQuery
       | TypeLiteral
<PredefinedType> ::= "any"
                    | "number"
                    | "boolean"
                    | "string"
                    | "void"
TypeReference ::= QualifiedIdentifier [ws TypeArguments]
QualifiedIdentifier ::= Identifier
                       | ModuleName '.' Identifier
(*This isn't really necessary, but it's useful to seperate the module name*)
ModuleName ::= Identifier ['.' Identifier]*
TypeArguments ::= <'<'> TypeArgumentList <'>'>
TypeArgumentList ::= TypeArgument ws-opt (<','> TypeArgument)*
TypeArgument ::= Type
TypeQuery ::= <"typeof"> ws QualifiedIdentifier
TypeLiteral ::= ObjectType
               | ArrayType
               | FunctionType
               | ConstructorType
ArrayType ::= ElementType ws-opt <'['> ws-opt <']'>
ElementType ::= PredefinedType
               | TypeReference
               | TypeQuery
               | ObjectType
               | ArrayType
FunctionType ::= 
  [TypeParameters] '(' [Parameter-List] ws-opt ')' ws-opt "=>" ws-opt Type
ConstructorType ::= <"new"> ws FunctionType
ObjectType ::= '{' ws-opt [TypeBody] ws-opt '}'
TypeBody ::= TypeMemberList ws-opt [<';'>]
TypeMemberList ::= TypeMember [';' TypeMember]*
TypeMember ::= PropertySignature
              | CallSignature
              | ConstructSignature
              | IndexSignature
              | MethodSignature
PropertySignature ::= PropertyName ['?'] [TypeAnnotation]
PropertyName ::= Identifier
                | StringLiteral
                | NumericLiteral
CallSignature ::= 
  [TypeParameters] ws-opt '(' ws-opt [Parameter-List] ws-opt ')' ws-opt [TypeAnnotation]
Parameter-List ::= 
    RequiredParameterList
  | OptionalParameterList
  | RestParameter
  | RequiredParameterList <','> OptionalParameterList
  | RequiredParameterList <','> RestParameter
  | OptionalParameterList <','> RestParameter
  | RequiredParameterList <','> OptionalParameterList <','> RestParameter
RequiredParameterList ::= RequiredParameter (<','> RequiredParameter)*
RequiredParameter ::= [#"public|private"] Identifier [TypeAnnotation] ws-opt
                     | Identifier ':' StringLiteral ws-opt
OptionalParameterList ::= OptionalParameter (<','> OptionalParameter)*
OptionalParameter ::= [#"public|private" ws] Identifier '?' [TypeAnnotation] ws-opt 
                     | [#"public|private" ws] Identifier [TypeAnnotation] Initialiser ws-opt
Initialiser ::= "=" LiteralValue
RestParameter ::= "..." Identifier [TypeAnnotation] ws-opt
ConstructSignature ::= "new" CallSignature
IndexSignature ::= "[" Identifier ':' #"string|number" "]" TypeAnnotation
MethodSignature ::= PropertyName ['?'] CallSignature
TypeAnnotation ::= ':' Type
InterfaceDeclaration ::= 
  <"interface"> ws Identifier [TypeParameters] [InterfaceExtendsClause] ObjectType
InterfaceExtendsClause ::= <"extends"> ClassOrInterfaceTypeList
ClassOrInterfaceTypeList ::= ClassOrInterfaceType (',' ClassOrInterfaceType)*
ClassOrInterfaceType ::= TypeReference
ClassHeritage ::= [ClassExtendsClause] [ImplementsClause]
ClassExtendsClause ::= "extends" TypeReference
ImplementsClause ::= "implements" ClassOrInterfaceTypeList
DeclarationSourceFile ::= DeclarationElement*
DeclarationElement ::= ExportAssignment
                      | [<"export">] InterfaceDeclaration
                      | [<"export">] ImportDeclarartion
                      | [<"export">] ExternalImportDeclaration
                      | [<"export">] AmbientDeclaration
ImportDeclarartion ::= "import" Identifier "=" QualifiedIdentifier ';'
ExternalImportDeclaration ::= 
  "import" Identifier '=' ExternalModuleReference <';'>
ExternalModuleReference ::= "require" <'('> StringLiteral <')'>
ExportAssignment ::= "export" "=" Identifier ';'
AmbientDeclaration ::= <"declare"> ws AmbientVariableDeclaration
                      | <"declare"> ws AmbientFunctionDeclaration
                      | <"declare"> ws AmbientClassDeclaration
                      | <"declare"> ws AmbientEnumDeclaration
                      | <"declare"> ws AmbientModuleDeclaration
                      | <"declare"> ws AmbientExternalModuleDeclaration
AmbientVariableDeclaration ::= <"var"> ws Identifier [ws TypeAnnotation] ws-opt <';'>
AmbientFunctionDeclaration ::= <"function"> Identifier CallSignature <';'>
AmbientClassDeclaration ::=
  <"class"> Identifier [TypeParameters] ClassHeritage <'{'> AmbientClassBody <'}'>
AmbientClassBody ::= AmbientClassBodyElement*
AmbientClassBodyElement ::= AmbientConstructorDeclaration
                             | AmbientPropertyMemberDeclaration
                             | IndexSignature
AmbientConstructorDeclaration ::= <"constructor"> '(' [Parameter-List] ')' <';'>
AmbientPropertyMemberDeclaration ::=
  [#"public|private" ws] ["static" ws] PropertyName [TypeAnnotation] ';'
  [#"public|private" ws] ["static" ws] PropertyName CallSignature ';'
AmbientEnumDeclaration ::= "enum" Identifier '{' [AmbientEnumBody] '}'
AmbientEnumBody ::= AmbientEnumMember [',' AmbientEnumMember]* [',']
AmbientEnumMember ::= PropertyName ['=' #"[0-9]+|0x\p{XDigit}+"]
AmbientModuleDeclaration ::= 
  "module" QualifiedIdentifier '{' AmbientModuleBody '}'
AmbientModuleBody ::= AmbientModuleElement*
AmbientModuleElement ::= [<"export">] ws AmbientVariableDeclaration
                         | [<"export">] ws AmbientFunctionDeclaration
                         | [<"export">] ws AmbientClassDeclaration
                         | [<"export">] ws AmbientEnumDeclaration
                         | [<"export">] ws AmbientModuleDeclaration
                         | [<"export">] ws AmbientExternalModuleDeclaration
                         | [<"export">] ws ImportDeclarartion
AmbientExternalModuleDeclaration ::= 
  "module" StringLiteral '{' AmbientExternalModuleBody '}'
AmbientExternalModuleBody ::= AmbientExternalModuleElement*
AmbientExternalModuleElement ::= AmbientModuleElement
                                  | ExportAssignment
                                  | [<"export">] ws ExternalImportDeclaration

LiteralValue ::= #"true|false"
                | "null"
                | StringLiteral
                | NumericLiteral
StringLiteral ::=
  #"(['\"])([^\"']*|\\\P{Zl}|(\\[\'\"bfnrtv]|x\p{XDigit}{2}|u\p{XDigit}{4}))*\1"
NumericLiteral ::=
  (*Decimal: optional integer followed by optional '.' followed by mandatory
  integer followed by optional exponent*)
  #"((?:(?:[0-9]*)?\.?[0-f]+(?:[Ee][-+]?[0-9]+))|0[Xx]\p{XDigit}+)"
<SeperatingWhitespace> ::= <#"[\p{Zs}\t\v\xA0\x20\x0C]">
<LineTerminator> ::= <#"\p{Zl}">
<Whitespace> ::= <#"[\p{Zs}\t\v\xA0\x20\x0C]|\p{Zl}">
<ws> ::= Whitespace+
<ws-opt> ::= Whitespace*
<ws-sep> ::= SeperatingWhitespace+
